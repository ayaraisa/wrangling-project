# -*- coding: utf-8 -*-
"""Project Wrangling SQL Pacmann.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sp3wtlTkE2vK-aH97CbEZb-x0RFkxUl6
"""

import sqlite3 as db
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

conn = db.connect('/content/drive/MyDrive/olist.db')

df_customers = pd.read_sql_query (
"""
SELECT * FROM sqlite_master 
WHERE type IN ("table", "view");
"""
,conn)
df_customers

products = pd.read_sql_query (
"""
SELECT * FROM olist_products_dataset;
"""
,conn)
products.head()

order_customer = pd.read_sql_query (
"""
SELECT * FROM olist_order_customer_dataset;
"""
,conn)
order_customer.head()

order_payments = pd.read_sql_query (
"""
SELECT * FROM olist_order_payments_dataset;
"""
,conn)
order_payments.head()

order_payments['payment_type'].unique()

order_items = pd.read_sql_query (
"""
SELECT * FROM olist_order_items_dataset;
"""
,conn)
order_items.head()

sellers = pd.read_sql_query (
"""
SELECT * FROM olist_sellers_dataset;
"""
,conn)
sellers.head()

df_geolocation = pd.read_sql_query (
"""
SELECT * FROM olist_geolocation_dataset;
"""
,conn)
df_geolocation.head()

product_category = pd.read_sql_query (
"""
SELECT * FROM product_category_name_translation;
"""
,conn)
product_category.head()

order_reviews = pd.read_sql_query (
"""
SELECT * FROM olist_order_reviews_dataset;
"""
,conn)
order_reviews.head()

df_order = pd.read_sql_query (
"""
SELECT * FROM olist_order_dataset;
"""
,conn)
df_order.dtypes

products.isna().sum()



products.dtypes

"""
Kategorik = product_id, product_category_name
numerik = product_name_lenght, des_lenght, photos_qty, weight_g, length_cm, height_cm, width_cm
"""

products.head()

products.describe(include="all").T

'''
Pertanyaan:
1. Produk yang paling banyak diminati (dilihat dari hasil penjualan) -> products, order_payments, product_category
Products: product_id, product_category_name
order_items: order_id, order_item, product_id
product_category: 	product_category_name, product_category_name_english

2. Produk dengan review score terbanyak -> products, product_category, order_reviews
Products: product_id, product_category_name
product_category: 	product_category_name, product_category_name_english
order_reviews: order_id, review_score

3. Paling banyak menggunakan payment apa?-> order_payments, order_item
order_payments : order_id, payment_type, payment_value 
order_items: order_id, price
'''

# TABLE PRODUCTS

products = products.drop([
    'product_name_lenght',
    'product_description_lenght',
    'product_photos_qty',
    'product_weight_g',
    'product_length_cm',
    'product_height_cm',
    'product_width_cm'],axis=1)
products.head()

products.isnull().sum()

products['product_category_name'] = products['product_category_name'].fillna("unknow")
products.isnull().sum()

products[products.duplicated(keep=False)].head(20)

# TABLE order_items
order_items= order_items.drop([
    'shipping_limit_date',
    'freight_value'], axis=1)

order_items.head()

order_items.isnull().sum()

order_items[order_items.duplicated(keep=False)].head(20)

order_items[order_items["price"] == order_items["price"].max()]

order_items[order_items["price"] == order_items["price"].median()]

order_item_price = order_items["price"]

order_item_price.plot(kind="box", title="Rentang Harga pada Pemesanan")
plt.show()

order_items.describe()

order_items[order_items["price"] == order_items["price"].max()]

products.loc[products["product_id"] == "489ae2aa008f021502940f251d4cce7f"]

# Ada outlier, dibikin batas dulu
IQR = order_items["price"].quantile(0.75) - order_items["price"].quantile(0.75)

#mencari q3 dari kolom price
q3_price = order_items["price"].quantile(0.75)

batas_atas = q3_price + (1.5 * IQR)
order_items = order_items[order_items["price"] < q3_price*1.5]

order_items

order_items.describe()

#TABLE order_reviews
order_reviews = order_reviews.drop([
    'review_id',
    'review_comment_title',
    'review_comment_message',
    'review_creation_date',
    'review_answer_timestamp'], axis=1)
order_reviews.head()

order_reviews.isnull().sum()

order_reviews[order_reviews.duplicated(keep=False)].head(20)

#TABLE sellers
sellers = sellers.drop([
    'seller_zip_code_prefix'], axis=1)


sellers.head()

sellers.isnull().sum()

#TABLE product_category
product_category.head()

product_category.isnull().sum()

product_category[product_category.duplicated(keep=False)].head(20)

product_category["product_category_name"].unique()

product_category["product_category_name_english"].unique()



# DATA MANIPULATION
#ganti product_category jadi english
product_category["product_category_name"] = product_category["product_category_name_english"]

product_category["product_category_name"].unique()

# Menggabungkan tabel-tabel
'''
1. 3 kategori produk dengan omset tertinggi -> products, order_payments, product_category
Products: product_id, product_category_name
order_items: order_id, order_item, product_id
product_category: product_category_name, product_category_name_english
'''

products_merge = pd.merge(product_category, products, on = "product_category_name", how = "inner")
products_order = pd.merge(products_merge,order_items, on = "product_id", how = "inner" )
products_order

products_clean = products_order.drop([
    'index_x',
    'product_category_name_english',
    'index_y',
    'index'], axis=1)
products_clean

products_clean['item_price']= products_clean['order_item_id']*products_clean['price']
products_clean

products_group = products_clean.groupby(['product_category_name'])['item_price'].sum().sort_values(ascending=False).head()
products_group

products_group.plot(kind='bar', title='Kategori Produk dengan Omset Terbaik',
               ylabel='Omset', xlabel='Kategori Produk', figsize=(10, 6), color=['orange'])
plt.xticks(rotation=0)

'''
2. Kategori roduk dengan review score di atas 4 terbanyak -> products, product_category, order_reviews
Products: product_id, product_category_name
product_category: 	product_category_name, product_category_name_english
order_items : order_id, order_item_id, product_id, seller id, price
order_reviews: order_id, review_score
'''

products_order

product_order_review = pd.merge(products_order, order_reviews, on = "order_id", how = "inner")
product_order_review = product_order_review.drop([
    'index_x',
    'index_y'], axis = 1)
product_order_review

#Flagging memenuhi score lebih dari 4
product_order_review["review_score"].apply(lambda x: "Terpenuhi" if x >= 4 else "Tidak Terpenuhi" )

product_order_review["status"] = product_order_review["review_score"].apply(lambda x: 1 if x >= 4 else 0 )
product_order_review
# Terpenuhi = 1, Tidak Terpenuhi = 0

product_order_review.dtypes

# Yang tidak terpenuhi di drop biar gampang
good_review = [1]
product_good_review = product_order_review[product_order_review['status'].isin(good_review)]
product_good_review

# Group by utk menghitung ada berapa orang yang memberikan review
product_good_review_sort = product_good_review.groupby(["product_category_name"])["review_score"].count().sort_values(ascending=False)
product_good_review_sort

#buat dataframe baru
count_review_score = [2301, 1423, 693, 221, 204, 50, 9]
product_cat = ["cool_stuff", "pet_shop", "consoles_games", "market_place", "audio", "dvds_blu_ray", "la_cuisine"]

data = count_review_score
keys = product_cat
palette_color = sns.color_palette('dark')
plt.pie(data, labels=keys, colors=palette_color, autopct='%.0f%%')

'''
3. Dari kategori barang dengan penjualan terbanyak, paling banyak menggunakan payment apa?-> order_payments, order_item, products_item,
order_payments : order_id, payment_type, payment_value 
order_items: order_id, price
'''

best_product_category = "cool_stuff"
df_best_product = products_clean[products_clean.product_category_name == best_product_category]
df_best_product

products_payment = pd.merge(order_payments, df_best_product, on = "order_id", how = "inner")
products_payment

# Group by utk menghitung ada masing" jumlah payment type
products_payment_sort = products_payment.groupby(["payment_type"])["order_id"].count().sort_values(ascending=False)
products_payment_sort

#buat dataframe baru
df_payment = pd.DataFrame({"payment_type" : ["credit_card", "boleto", "voucher", "debit_card"],
                           "count_order" : [2269, 592, 210, 33]})
df_payment

df_payment.plot.barh(x='payment_type', y='count_order',
             title='Payment Type Order', color='pink')

